{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fc6dcc51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter size of Hash Table: 5\n",
      "\n",
      "1=Linear Probing\n",
      "2=Chain Probing\n",
      "3=Exit\n",
      "Enter Choice: 1\n",
      "\n",
      "1=Insert\n",
      "2=Search\n",
      "3=Display\n",
      "4=Return\n",
      "Enter Choice: 1\n",
      "Enter name: sa\n",
      "Enter number: 66\n",
      "\n",
      "1=Insert\n",
      "2=Search\n",
      "3=Display\n",
      "4=Return\n",
      "Enter Choice: 3\n",
      "\n",
      "Name:Number\n",
      "None : None\n",
      "sa:66\n",
      "None : None\n",
      "None : None\n",
      "None : None\n",
      "\n",
      "1=Insert\n",
      "2=Search\n",
      "3=Display\n",
      "4=Return\n",
      "Enter Choice: 4\n",
      "Returning...\n",
      "\n",
      "1=Linear Probing\n",
      "2=Chain Probing\n",
      "3=Exit\n",
      "Enter Choice: 3\n",
      "Exiting...\n"
     ]
    }
   ],
   "source": [
    "TableSize = int(input(\"Enter size of Hash Table: \"))\n",
    "\n",
    "#Functions for linear probing\n",
    "def line_insert():\n",
    "    get_name = input(\"Enter name: \")\n",
    "    get_num = input(\"Enter number: \")\n",
    "    hash_row = get_name+\":\"+get_num\n",
    "    position = int(get_num)%TableSize\n",
    "    \n",
    "    if(hashTable[position]==None):\n",
    "        hashTable[position]=hash_row\n",
    "    else:\n",
    "        print(\"Collision occured for {}.\".format(get_name))\n",
    "        while hashTable[position]!=None:\n",
    "            position+=1\n",
    "            if position>=TableSize:\n",
    "                position=0\n",
    "        hashTable[position]=hash_row\n",
    "\n",
    "def line_search():\n",
    "    t_list = [range(len(hashTable))]\n",
    "    get_name = input(\"Enter name: \")\n",
    "    get_num = input(\"Enter number: \")\n",
    "    count = 0\n",
    "    for i in range(len(hashTable)):\n",
    "        count+=1\n",
    "        if hashTable[i] is not None:\n",
    "            t_list = hashTable[i].split(\":\")\n",
    "            if t_list[0] == get_name and t_list[1]==get_num:\n",
    "                print(\"{} found at position {}, in {} comparisions\".format(get_name,i,count-1))\n",
    "                return\n",
    "        \n",
    "            else:\n",
    "                print(\"No such record found!\")\n",
    "\n",
    "def line_display():\n",
    "    print(\"\\nName:Number\")\n",
    "    for i in range(len(hashTable)):\n",
    "        if hashTable[i] == None:\n",
    "            print(\"None : None\")\n",
    "        else:\n",
    "            print(hashTable[i])\n",
    "\n",
    "\n",
    "#functions for chain probing\n",
    "def chain_insert(hashTable):\n",
    "    get_name = input(\"Enter name: \")\n",
    "    get_num = input(\"Enter number: \")\n",
    "    hash_row = get_name+':'+get_num\n",
    "    hash_key = hashing(int(get_num))\n",
    "    hashTable[hash_key].append(hash_row)\n",
    "    \n",
    "def chain_search(hashTable):\n",
    "    count = 0\n",
    "    t_list = [range(len(hashTable))]\n",
    "    get_name = input(\"Enter name: \")\n",
    "    get_num = input(\"Enter number: \")\n",
    "    for i in range(len(hashTable)):\n",
    "        for j in hashTable[i]:\n",
    "            count+=1\n",
    "            if j==None:\n",
    "                count+=1\n",
    "            elif j!=None:\n",
    "                t_list = j.split(\":\")\n",
    "                if t_list[0] == get_name and t_list[1] == get_num:\n",
    "                    print(\"{} found at position {}, in {} comparisions\".format(get_name,i,count-1))\n",
    "                    \n",
    "        count+=1\n",
    "        \n",
    "def chain_display(hashTable):\n",
    "    for i in range(len(hashTable)):\n",
    "        print(i,end=\" : \")\n",
    "        for j in hashTable[i]:\n",
    "            print(j)\n",
    "        print()\n",
    "\n",
    "\n",
    "#Main Function\n",
    "exit=0\n",
    "while(exit!=1):\n",
    "    chc1 = int(input(\"\\n1=Linear Probing\\n2=Chain Probing\\n3=Exit\\nEnter Choice: \"))\n",
    "    if chc1==1:\n",
    "        hashTable = list(None for i in range(TableSize))        \n",
    "        exit2=0\n",
    "        while exit2!=1:\n",
    "            chc2 = int(input(\"\\n1=Insert\\n2=Search\\n3=Display\\n4=Return\\nEnter Choice: \"))\n",
    "            if chc2==1:\n",
    "                line_insert()\n",
    "            elif chc2==2:\n",
    "                line_search()\n",
    "            elif chc2==3:\n",
    "                line_display()\n",
    "            elif chc2==4:\n",
    "                print(\"Returning...\")\n",
    "                exit2+=1\n",
    "            else:\n",
    "                print(\"Invalid Choice!\")\n",
    "            \n",
    "    elif chc1==2:\n",
    "        hashTable = [[]for i in range(TableSize)]  \n",
    "        exit2=0\n",
    "        \n",
    "        def hashing(key):\n",
    "            return key%len(hashTable)\n",
    "        \n",
    "        while exit2!=1:\n",
    "            chc2 = int(input(\"\\n1=Insert\\n2=Search\\n3=Display\\n4=Return\\nEnter Choice: \"))\n",
    "            if chc2==1:\n",
    "                chain_insert(hashTable)\n",
    "            elif chc2==2:\n",
    "                chain_search(hashTable)\n",
    "            elif chc2==3:\n",
    "                chain_display(hashTable)\n",
    "            elif chc2==4:\n",
    "                print(\"Returning...\")\n",
    "                exit2+=1\n",
    "            else:\n",
    "                print(\"Invalid Choice!\")\n",
    "            \n",
    "    elif chc1==3:\n",
    "        print(\"Exiting...\")\n",
    "        exit+=1\n",
    "    \n",
    "    else:\n",
    "        print(\"Invalid Choice\")\n",
    "        "
   ]
  }
 ],
 
